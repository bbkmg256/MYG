
# NOTAS DE DESARROLLO #

* Autor: BBKMG *
* Proyecto: MYG *


(16/12/24)

Hoy se inicia (por 7ma vez) el proyecto integrador de POO, un sistema de gestion de clientes para un gimnacio,
basicamente hoy voy a crear las clases basicas, y hacer una primera conexion con mi BD.
Lo que de por momento mas se me complica es estructurar el esquema o diagrama de clases ya que me confunde un poco
como hacerlo y llevar el registro de entrenamiento de los usuarios, si bien tengo una base (gracias a un amigo),
se me sigue haciendo complicado estructurarlo, aun que voy a seguir trabajando en eso.


(18/12/24)

Se termino de definir lo basico de las clases principales, ademas de que se soluciono problemas con depedencias 
de base de datos no funcionales (no era posible la conexion a la BD con la dependencia antes empleada).

Por el momento faltas hacer el mapeo con JPA de las clase y sus relaciones.


(02/02/25)

Creado el fichero de persistencia "persistence.xml"


(26/02/25)

Vuelta al proyecto...

Se relacionaron las entidades entre si, pero por el momento esas relciónes están comentadas para no romper nadad
ademas se debe mapear con @OneToOne o @OneToMany y así para las interrelaciones de entidades para la BD.


(13/03/25)

Tras problemas con netbeans se tuvo que cambiar el IDE y rehacer todo desde 0, por el momento todo vuelve a funcionar,
pero aun faltan bastantes modulos que crear, ademas de la interfaz graficas y completar el CRUD del los JPAController.


(14/03/25)

Se trabajó en el primer JPAController para la entidad cliente, y se logró que funcione la carga de datos, pero de cierta
manera que todavía se debe verificar que no cargue (o que actualice en todo caso), entidades que ya existen en la BD.


(15/03/25)

Se está desarrollando el crud para los clientes, por el momento se tiene la carga y la baja, falta la busqueda y la
actualización, además por el momento se tiene cierto problema con la forma en que Hibernate maneja la BD, es necesario
tener el esquema de BD creada antes de usar el programa, cosa que no me gusta demaciado pero a fines practicos y para
enfocarme en otras cosas por el momento, lo voy a dejar así.
Por último, y poco relevante, es que se volcó toda la prueba al Main principal, así se deja mas unificado todo y no se
está probando desde una clase que no es.


(26/03/25)

Se trabajó en el CRUD del JPAController del cliente (por el momento no hay relaciones, ya que estoy seguro que eso
va a ser como una patada en las pelotas plantearlo bien xd), se encuentra funcional (aun que no probe la actualizacion
todavía, son las 5 de la tarde y desde las 9 de la mañana que estoy intridujendo y solucionando mis propios errores
xd, pero aparentemente todo funciona).
Algo curioso es que se supone que hibernate en la opcion "update" en el fichero persistence.xml NO debería crear las
tablas de la BD si estás ya no existen previamente, pero aun así lo hace, osea, es bueno (por que pense que tendría
que crear algun script o algo por afuera para manejar la creacion de las tablas, pero no xd) ya que no voy a tener
que hacer matufias raras, pero es curioso por que leí que no debería hacer eso, en fin, funciona.


(27/03/25)

Se trabajo en el JPAController del tutor, todavía no se establecieron las relaciones, por lo que a futuro se
tendrá que modificar estos controladores.


(29/03/25)

Se trabajó en la capa de repositorio del sistema, hasta el momento se tienen escritas las clases de los jpa controller,
mas adelante se tendra que reveer estas clases ya que hay mucho codigo repetido, por ende lo mas probable es que tenga
que usar algun tipo de dato generico para reutilizar 1 solo jpa controller, o alguna matufia rara tendré que hacer xd.
Además se creo la capa de servicio el cual interactuará con la capa de repositorio para los datos.


(30/03/25)

Se creo la capa de servicio para el sistema, la UI y cualquier otra cosa que requiera de interaccion con la BD o realizar
operaciones con la capa del modelo, va a hacer uso de esta capa (el servicio). Por el momento el codigo esta medio malardo
pero esto se va a reveer mas a delante ya que hay demaciado codigo repetido (algunos metodos se pueden simplificar en una
clase que use tipos de datos genericos o algo similar y las clase servicios pueden heredar de este sobreescribiendo metodos
que requieran un tratamiento especifico para la clase), aun así, esto se reveera mas adelante.


(31/03/25)

Se modificó la capa de persistencia, todas las clases heredan de una clase padre llamada "JPAController", a su vez las
clases hijas solo escriben un metodo para actualizar sus propios datos, es decir, como cada entidad varia en parametros
actualizables, cada JPAController de cada entidad, escribe su propio metodo "actualizarEntidad()".
La capa de servicio ya tiene todas las clases correspondientes a cada entidad, pero todavía no está completamente terminado
ya que no contempla TODAS las acciones posibles (lógica de negocios) sobre la BD.


(02/04/25)

Se logró implementar JavaFX al proyecto, solo que no mediante Maven, sino que de forma manual, por ende, se deberá
instalar el sdk manualmente cada que se quiera compilar o modificar el proyecto.

Actualización: Se logró implementarlo mediante Maven, ahora el problema es el fichero modulo, realmente no es necesario al ser un
proyecto pequeño, pero se recomienda por seguridad y otros temas, aun que como refactorice el proyecto, ahora me está dando problemas
por el cambio de nombre, por ende opto por no utilizar ese fichero en el proyecto.


(03/04/25)

[JEJE, hoy salió "Una película de Minecraft" acabo de ver un leak de 1H pensando que era la peli final, casi me muero!!]

Se pudo implementar el uso de .fxml para las vistas, desde ahora se trabajará con estos ficheros para crear cada vista
y se importara para poder darle funcionamiento con java.


(05/04/25)

Se ah trabajado en el backend del sistema, buscando mejorar la modularidad del codigo, se creo un nuevo metodo en la capa
del JPAController ("obtenerEntidades"), la idea es poder, a diferencia del metodo "obtenerEntidad", buscar registros de la
base de datos correspondiente a la entidad desde donde se ejecuta el metodo y traer todos los registros almacenados de
dicha entidad, en una lista, para su posterior manipulación. Mas que nada se pretende usar este metodo en vistas que tengan
como funcion la de mostrar todos los registros almacenados de una entidad en la BD.

Además de esto se ah creado un tablero en Trello para ayudar a la organización del proyecto, marcando:

- Cosas pendientes -> Para organizar lo que se debe hacer

- Cosas en proceso -> Para organizar y marcar lo que se está haciendo

- Cosas realizadas -> Para organizar y tener registro de lo que ya se cumplió

- Cosas pospuestas -> Para sentar las cosas que por el momento se van a dejar para despues

Otra cosa en la que se estuvo trabajando fue en el problema de la clase "module-info.java", se optó por eliminar está clase
modulo, por problemas en la refactorización del proyecto (se cambió el nombre de GYM a MYG), este daba errores de dependencias
no encontradas. Justamente por la encapsulación fuerte que brinda la modularizacion mediante modulos xd, al cambiarle el
nombre al proyecto se produjeron errores en las dependencias Maven y la clase no permitia exponer paquetes a las dependencias,
por que no las encontraba.
